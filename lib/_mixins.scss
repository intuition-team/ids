// миксин для добавления дополнительных переменных, зависящих от изменяемых переменных типографики
@mixin typoVariables() {
  //базовые
  --fluid-bp: calc(
    (var(--fluid-screen) - var(--fluid-min-width) / 16 * 1rem) /
      (var(--fluid-max-width) - var(--fluid-min-width))
  );
  --step-0: calc(
    ((var(--f-0-min) / 16) * 1rem) + (var(--f-0-max) - var(--f-0-min)) *
      var(--fluid-bp)
  );
  //положительные
  --f-1-min: calc(var(--f-0-min) * var(--type-scale-desktop));
  --f-1-max: calc(var(--f-0-max) * var(--type-scale-desktop));
  --step-1: calc(
    ((var(--f-1-min) / 16) * 1rem) + (var(--f-1-max) - var(--f-1-min)) *
      var(--fluid-bp)
  );
  --f-2-min: calc(var(--f-1-min) * var(--type-scale-desktop));
  --f-2-max: calc(var(--f-1-max) * var(--type-scale-desktop));
  --step-2: calc(
    ((var(--f-2-min) / 16) * 1rem) + (var(--f-2-max) - var(--f-2-min)) *
      var(--fluid-bp)
  );
  --f-3-min: calc(var(--f-2-min) * var(--type-scale-desktop));
  --f-3-max: calc(var(--f-2-max) * var(--type-scale-desktop));
  --step-3: calc(
    ((var(--f-3-min) / 16) * 1rem) + (var(--f-3-max) - var(--f-3-min)) *
      var(--fluid-bp)
  );
  //отрицательные
  --f--1-min: calc(var(--f-0-min) / var(--type-scale-desktop));
  --f--1-max: calc(var(--f-0-max) / var(--type-scale-desktop));
  --step--1: calc(
    ((var(--f--1-min) / 16) * 1rem) + (var(--f--1-max) - var(--f--1-min)) *
      var(--fluid-bp)
  );
  --f--2-min: calc(var(--f--1-min) / var(--type-scale-desktop));
  --f--2-max: calc(var(--f--1-max) / var(--type-scale-desktop));
  --step--2: calc(
    ((var(--f--2-min) / 16) * 1rem) + (var(--f--2-max) - var(--f--2-min)) *
      var(--fluid-bp)
  );
}

// миксин для переопределения переменных на мобильных экранах
@mixin mediaMobile() {
  @media screen and (max-width: 768px) {
    @content;
  }
}

// любая тема состоит из названия, цветов, шрифтов и типографики
@mixin define-theme($name, $colors, $fonts: (), $typo: ()) {
  @each $colorName, $colorValue in $colors {
    :root .#{$name} {
      --wds__#{$colorName}-RGB: #{$colorValue};
    }
  }

  @if length($fonts) > 0 {
    $fontName: nth($fonts, 1);
    $fontValues: nth($fonts, 2);

    :root .#{$name} {
      --wds__font: "#{$fontName}", Arial, sans-serif;
    }

    @if map-has-key($fontValues, "regular") {
      $value: map-get($fontValues, "regular");
      @include font-face("#{$fontName}", #{$value}, 400, normal);
    }
    @if map-has-key($fontValues, "medium") {
      $value: map-get($fontValues, "medium");
      @include font-face("#{$fontName}", #{$value}, 500, normal);
    }
    @if map-has-key($fontValues, "bold") {
      $value: map-get($fontValues, "bold");
      @include font-face("#{$fontName}", #{$value}, 700, normal);
    }
  }

  :root .#{$name} {
    @if map-has-key($typo, "density") {
      --wds__density: #{map-get($typo, "density")};
    }
    @if map-has-key($typo, "desktop") {
      $desktopTypo: map-get($typo, "desktop");
      $hasMin: map-has-key($desktopTypo, "font-size-min");
      $hasMax: map-has-key($desktopTypo, "font-size-max");
      $hasScale: map-has-key($desktopTypo, "font-scale");

      @if $hasMin == true {
        --f-0-min: #{map-get($desktopTypo, "font-size-min")};
      }
      @if $hasMax == true {
        --f-0-max: #{map-get($desktopTypo, "font-size-max")};
      }
      @if $hasScale == true {
        --type-scale-desktop: #{map-get($desktopTypo, "font-scale")};
      }
      @if $hasMin == true or $hasMax == true or $hasScale == true {
        @include typoVariables();
      }
    }
    @if map-has-key($typo, "mobile") {
      $mobileTypo: map-get($typo, "mobile");
      $hasMin: map-has-key($mobileTypo, "font-size-min");
      $hasMax: map-has-key($mobileTypo, "font-size-max");
      $hasScale: map-has-key($mobileTypo, "font-scale");

      @include mediaMobile() {
        @if $hasMin == true {
          --f-0-min: #{map-get($mobileTypo, "font-size-min")};
        }
        @if $hasMax == true {
          --f-0-max: #{map-get($mobileTypo, "font-size-max")};
        }
        @if $hasScale == true {
          --type-scale-desktop: #{map-get($mobileTypo, "font-scale")};
        }
        @if $hasMin == true or $hasMax == true or $hasScale == true {
          @include typoVariables();
        }
      }
    }
  }
}
